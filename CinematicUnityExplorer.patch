diff --git a/src/ObjectExplorer/SearchProvider.cs b/src/ObjectExplorer/SearchProvider.cs
index 61e2f7e..b4d6e14 100644
--- a/src/ObjectExplorer/SearchProvider.cs
+++ b/src/ObjectExplorer/SearchProvider.cs
@@ -127,16 +127,26 @@ namespace UnityExplorer.ObjectExplorer
             string nameFilter = "";
             if (!string.IsNullOrEmpty(input))
                 nameFilter = input;
-
+            int assemblies_found = 0;
+            int assemblies_skipped = 0;
             foreach (Assembly asm in AppDomain.CurrentDomain.GetAssemblies())
             {
-                foreach (Type type in asm.GetTypes())
+                assemblies_found++;
+                try
                 {
-                    if (!string.IsNullOrEmpty(nameFilter) && !type.FullName.ContainsIgnoreCase(nameFilter))
-                        continue;
-                    list.Add(type);
+                    foreach (Type type in asm.GetTypes())
+                    {
+                        if (!string.IsNullOrEmpty(nameFilter) && !type.FullName.ContainsIgnoreCase(nameFilter))
+                            continue;
+                        list.Add(type);
+                    }
+                }
+                catch
+                {
+                    assemblies_skipped++;
                 }
             }
+            ExplorerCore.LogWarning($"found {assemblies_found} assemblies and {assemblies_skipped} skipped");
 
             return list;
         }
@@ -165,21 +175,32 @@ namespace UnityExplorer.ObjectExplorer
 
             BindingFlags flags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.FlattenHierarchy;
 
+            int assemblies_found = 0;
+            int assemblies_skipped = 0;
             foreach (Assembly asm in AppDomain.CurrentDomain.GetAssemblies())
             {
+                assemblies_found++;
                 // Search all non-static, non-enum classes.
-                foreach (Type type in asm.GetTypes().Where(it => !(it.IsSealed && it.IsAbstract) && !it.IsEnum))
+                try
                 {
-                    try
+                    foreach (Type type in asm.GetTypes().Where(it => !(it.IsSealed && it.IsAbstract) && !it.IsEnum))
                     {
-                        if (!string.IsNullOrEmpty(nameFilter) && !type.FullName.ContainsIgnoreCase(nameFilter))
-                            continue;
+                        try
+                        {
+                            if (!string.IsNullOrEmpty(nameFilter) && !type.FullName.ContainsIgnoreCase(nameFilter))
+                                continue;
 
-                        ReflectionUtility.FindSingleton(instanceNames, type, flags, instances);
+                            ReflectionUtility.FindSingleton(instanceNames, type, flags, instances);
+                        }
+                        catch { }
                     }
-                    catch { }
+                }
+                catch
+                {
+                    assemblies_skipped++;
                 }
             }
+            ExplorerCore.LogWarning($"found {assemblies_found} assemblies and {assemblies_skipped} skipped");
 
             return instances.Distinct().ToList();
         }
